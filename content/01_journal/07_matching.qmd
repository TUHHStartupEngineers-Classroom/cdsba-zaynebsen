---
title: "Matching and Subclassification"
---
---
1- DAG:
---
```{r}
library(dagitty)
library(ggdag)

model <- dagify(
card~ sex,
prev_avg_purch~ sex,
card~ age,
prev_avg_purch~ age,
card~prev_avg_purch,
avg_purch~prev_avg_purch,
avg_purch~card,
coords = list( x= c(age = 1,prev_avg_purch=1,sex=2, avg_purch=2, card =3),
                y = c(age = 0,prev_avg_purch=1,sex=0, avg_purch=2, card =1))
)
ggdag(model) +
  geom_dag_point(color = "white") +
  geom_dag_text(color = "blue") +
  geom_dag_edges(edge_color = "blue")
```

---
2- naive estimate of the average treatment effect:
---

```{r}
membership <- readRDS("membership.rds")
E_0 <- mean(membership[membership$card==F, ]$avg_purch) # control group
E_1 <- mean(membership[membership$card==T, ]$avg_purch) # treatment group
E_1 - E_0

summary(lm(avg_purch ~ card, membership))
```

---
3.1- (Coarsened) Exact Matching:
---

```{r}
library(MatchIt)
cem <- matchit(card~ age+sex+pre_avg_purch ,
               data = membership, 
               method = 'cem', 
               estimand = 'ATE')
summary(cem)
df_cem <- match.data(cem)
# Estimation
model_cem <- lm(avg_purch ~ card, data = df_cem, weights = weights)
summary(model_cem)
# Custom coarsening
# (1) Matching
cutpoints <- list(age = seq(25, 65, 20), pre_avg_purch = seq(10, 180, 50),sex= seq(0,1,3))
                   
cem_coars <- matchit(card~ age + pre_avg_purch+sex,
                     data = membership, 
                     method = 'cem', 
                     estimand = 'ATE',
                     cutpoints = cutpoints)

# Covariate balance
summary(cem_coars)
# Plot grid
library(ggplot2)
library(ggthemr)

ggplot(df_cem, aes(x = age, y = pre_avg_purch,
                         size = weights, color = as.factor(card))) +
  geom_point(alpha = .2) +
  geom_abline(data.frame(y = cutpoints$pre_avg_purch),
              mapping = aes(intercept = y, slope = 0), 
              linewidth = 1.5, color = ggthemr::swatch()[5]) +
  geom_vline(data.frame(y = cutpoints$age),
              mapping = aes(xintercept = y),
             linewidth = 1.5, color = ggthemr::swatch()[5]) +
  theme(legend.position = "none")

ggplot(df_cem, aes(x = sex, y = pre_avg_purch,
                         size = weights, color = as.factor(card))) +
  geom_point(alpha = .2) +
  geom_abline(data.frame(y = cutpoints$pre_avg_purch),
              mapping = aes(intercept = y, slope = 0), 
              linewidth = 1.5, color = ggthemr::swatch()[5]) +
  geom_vline(data.frame(y = cutpoints$sex),
              mapping = aes(xintercept = y),
             linewidth = 1.5, color = ggthemr::swatch()[5]) +
  theme(legend.position = "none")

```

---
3.2- Nearest-Neighbor Matching:
---
```{r}
nn <- matchit(card~ age+sex+pre_avg_purch,
              data = membership,
              method = "nearest", # changed
              distance = "mahalanobis", # changed
              replace = T)

# Covariate Balance
summary(nn)
# Use matched data
df_nn <- match.data(nn)

# (2) Estimation
model_nn <- lm(avg_purch ~ card, data = df_nn, weights = weights)
summary(model_nn)

```
---
3.3- Inverse Probability Weighting:
---

```{r}
# Propensity scores
model_prop <- glm(card ~ age + pre_avg_purch + sex,
                  data = membership,
                  family = binomial(link = "logit"))
summary(model_prop)
# Add propensities to table
library(dplyr)
membership_aug <- membership%>% mutate(propensity = predict(model_prop, type = "response"))
# Extend data by IPW scores
membership_ipw <- membership_aug %>% mutate(
  ipw = (card/propensity) + ((1-card) / (1-propensity)))

# Look at data with IPW scores
membership_ipw %>% 
  select(card, age, sex,pre_avg_purch, propensity, ipw)

# Estimation
model_ipw <- lm(avg_purch ~ card,
                data = membership_ipw, 
                weights = ipw)
summary(model_ipw)

# Plot 
ggplot(membership_aug, aes(x = propensity)) +
  geom_histogram(alpha = .8, color = "white")

membership_ipw %>% 
  select(card, age, pre_avg_purch,sex, propensity, ipw) %>% 
  arrange(desc(ipw))
model_ipw_trim <- lm(avg_purch ~ card,
                data = membership_ipw %>% filter(propensity %>% between(0.15, 0.85)),
                weights = ipw)
summary(model_ipw_trim)
```

